#include "gtest/gtest.h"
#include <cmath>
#include <iostream>
#include <iomanip>
#include <string>


//------------------------------------------------------------------------------------------
//Files we are testing:
#include "../../includes/two_pointers/two_pointers.h"


//------------------------------------------------------------------------------------------

using namespace std;

//------------------------------------------------------------------------------
//          COPY BASIC_TEST INTO THIS FILE.
//                    AND THEN,
//         DO NOT EDIT THIS FILE ANY FURTHER
//------------------------------------------------------------------------------

// print array function
template <typename T>
void print_array(T* a, int how_many, ostream& outs=cout)
{
  outs << "[";
  for (int i = 0; i < how_many-1; i++) {
    outs << setw(2) << *(a++) << ",";
  }
  outs << setw(2) << *a << "]";
}

bool test_two_pointers(bool debug = false)
{
  int size;

  cout << "\n\n========== Test Remove Duplicates ==========\n\n";

  // Test case 1:
  int a[] = {1,1,2};
  size = 3;
  cout << "Input:  arr = ";
  print_array(a, size);
  cout << endl;
  removeDuplicates(a, size);
  cout << "Output: arr = ";
  print_array(a, size);
  cout << ", size = " << size << endl << endl;

  // Test case 2:
  int b[] = {0,0,1,1,1,2,2,3,3,4};
  size = 10;
  cout << "Input:  arr = ";
  print_array(b, size);
  cout << endl;
  removeDuplicates(b, size);
  cout << "Output: arr = ";
  print_array(b, size);
  cout << ", size = " << size << endl << endl;

  // Test case 3:
  char c[] = "aaabbccccdeefggh";
  size = strlen(c);
  cout << "Input:  arr = ";
  print_array(c, size);
  cout << endl;
  removeDuplicates(c, size);
  cout << "Output: arr = ";
  print_array(c, size);
  cout << ", size = " << size << endl << endl;


  cout << "\n\n========== Test Two Sum ==========\n\n";

  int target;
  int* indices;

  // Test case 4:
  int d[] = {2,7,11,15};
  size = 4;
  target = 9;
  cout << "Input:  arr = ";
  print_array(d, size);
  cout << ", target = " << target << endl;
  indices = twoSum(d, size, target);
  cout << "Output: arr = ";
  print_array(indices, 2);
  cout << endl << endl;

  // Test case 5:
  int e[] = {2,3,4};
  size = 3;
  target = 6;
  cout << "Input:  arr = ";
  print_array(e, size);
  cout << ", target = " << target << endl;
  indices = twoSum(e, size, target);
  cout << "Output: arr = ";
  print_array(indices, 2);
  cout << endl << endl;

  // Test case 6:
  int f[] = {-1,0};
  size = 2;
  target = -1;
  cout << "Input:  arr = ";
  print_array(f, size);
  cout << ", target = " << target << endl;
  indices = twoSum(f, size, target);
  cout << "Output: arr = ";
  print_array(indices, 2);
  cout << endl << endl;


  cout << "\n\n========== Test Longest Substring Without Repeating Characters ==========\n\n";
  
  int len;

  // Test case 7:
  char g[] = "abcabcbb";
  size = strlen(g);
  cout << "s = ";
  print_array(g, size);
  cout << endl;
  len = lengthOfLongestSubstring(g, size);
  cout << "Output: " << len << endl << endl;

  // Test case 8:
  char h[] = "bbbbb";
  size = strlen(h);
  cout << "s = ";
  print_array(h, size);
  cout << endl;
  len = lengthOfLongestSubstring(h, size);
  cout << "Output: " << len << endl << endl;

  // Test case 9:
  char i[] = "pwwkew";
  size = strlen(i);
  cout << "s = ";
  print_array(i, size);
  cout << endl;
  len = lengthOfLongestSubstring(i, size);
  cout << "Output: " << len << endl << endl;

  return true;
}


//Lord help me! 
const bool debug = false;

TEST(TEST_TWO_POINTERS, TestTwoPointers)
{
  bool success = test_two_pointers(debug);
  EXPECT_EQ(success, true);
}


int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  std::cout<<"\n\n----------running basic_test.cpp---------\n\n"<<std::endl;
  return RUN_ALL_TESTS();
}


/*
includes
└── two_pointers
    └── two_pointers.h

----------running basic_test.cpp---------
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from TEST_TWO_POINTERS
[ RUN      ] TEST_TWO_POINTERS.TestTwoPointers


========== Test Remove Duplicates ==========

Input:  arr = [ 1, 1, 2]
Output: arr = [ 1, 2], size = 2

Input:  arr = [ 0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
Output: arr = [ 0, 1, 2, 3, 4], size = 5

Input:  arr = [ a, a, a, b, b, c, c, c, c, d, e, e, f, g, g, h]
Output: arr = [ a, b, c, d, e, f, g, h], size = 8



========== Test Two Sum ==========

Input:  arr = [ 2, 7,11,15], target = 9
Output: arr = [ 1, 2]

Input:  arr = [ 2, 3, 4], target = 6
Output: arr = [ 1, 3]

Input:  arr = [-1, 0], target = -1
Output: arr = [ 1, 2]



========== Test Longest Substring Without Repeating Characters ==========

s = [ a, b, c, a, b, c, b, b]
Output: 3

s = [ b, b, b, b, b]
Output: 1

s = [ p, w, w, k, e, w]
Output: 3

[       OK ] TEST_TWO_POINTERS.TestTwoPointers (0 ms)
[----------] 1 test from TEST_TWO_POINTERS (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (0 ms total)
[  PASSED  ] 1 test.
*/
